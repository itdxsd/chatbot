{
  "stats": {
    "suites": 1,
    "tests": 22,
    "passes": 21,
    "pending": 0,
    "failures": 1,
    "start": "2020-06-29T01:54:39.752Z",
    "end": "2020-06-29T01:58:37.011Z",
    "duration": 237259,
    "testsRegistered": 22,
    "passPercent": 95.45454545454545,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f5758444-1fb1-48ee-b424-7239bf275843",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "Botium Test-Suite \"before all\" hook",
              "timedOut": false,
              "duration": 312,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "02d3fe66-db74-4fb6-b2c2-823bb3417c31",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Botium Test-Suite \"before each\" hook",
              "timedOut": false,
              "duration": 161,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "638990b1-8284-43a9-8e79-517707969832",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook",
              "fullTitle": "Botium Test-Suite \"after all\" hook",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "bff68df6-8ab9-4824-8c6c-79978fbbb7e4",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook",
              "fullTitle": "Botium Test-Suite \"after each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "cce287dd-083c-4db0-a1eb-8b2c372e2068",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "ATM Cards - ATM Cards - BranchDetails",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - BranchDetails",
              "timedOut": false,
              "duration": 8114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Branch Details\\n#bot: Click here for a list of UCPB branches and branch details:\\nhttps://www.ucpb.com/branches/\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "f4bbe0a9-876a-4e14-b5a7-e187c991f136",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Blocked",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Blocked",
              "timedOut": false,
              "duration": 20072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Other Card Problems\\n#bot: undefined\\n#me: My card is blocked.\\n#bot: Blocked ATM cards due to wrong PIN will automatically reactivate after 24 hours. If you can no longer remember the correct PIN, please visit or call your maintaining branch to request for a new PIN mailer.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "7031161d-fecf-4672-a6c0-c025742d5dc2",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Captured - ATM Cards - CardProblems - Captured - OtherATM",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Captured - ATM Cards - CardProblems - Captured - OtherATM",
              "timedOut": false,
              "duration": 13313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Other Card Problems\\n#bot: undefined\\n#me: My card is captured\\n#bot: undefined\\n#me: Other ATM Banks\\n#bot: Please contact the bank regarding their procedure for captured cards.\\n\\nYou may also want to replace your ATM card at your maintaining branch subject to a card replacement fee.\\nClick here for a list of service fees and charges:\\nhttps://www.ucpb.com/rates/servicefeesandcharges/\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "0ee2a5a3-f2a6-4d29-9e34-da002425fc82",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Captured - ATM Cards - CardProblems - Captured - UCPBAtm",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Captured - ATM Cards - CardProblems - Captured - UCPBAtm",
              "timedOut": false,
              "duration": 7809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Other Card Problems\\n#bot: undefined\\n#me: My card is captured\\n#bot: undefined\\n#me: UCPB ATM\\n#bot: If your ATM card was captured at a UCPB branch ATM, you may claim your ATM card during banking hours.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "f9df6b72-9d8a-48d0-b3a4-204ee468bf72",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Lost",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Lost",
              "timedOut": false,
              "duration": 12075,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Other Card Problems\\n#bot: undefined\\n#me: My card is lost.\\n#bot: Report lost or stolen cards immediately to UCBP’s ATM Center Hotline at (02) 811-9292 or through the UCPB Connect Internet Banking Facility “Report a Lost Card” function.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "48c2f4f5-7aae-4b2c-8f8e-029e9279340e",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Replacement",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - CardProblems - ATM Cards - CardProblems - Replacement",
              "timedOut": false,
              "duration": 6734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Other Card Problems\\n#bot: undefined\\n#me: ATM Card Replacement\\n#bot: Here are the steps to replacing your lost/stolen card:\\n•  Visit your maintaining \\n   UCPB maintaining \\n   branch\\n•  Submit a notarized \\n   Affidavit of Loss\\n•  Fill out an ATM \\n   Replacement \\n   Form\\n•  Pay applicable card \\n   replacement Fee\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "ed227c7b-d604-4028-81c2-4d69875a0f15",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - CVV",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - CVV",
              "timedOut": false,
              "duration": 8429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: ATM Card Faqs\\n#bot: undefined\\n#me: CVV\\n#bot: CVV means Card Verification Value.\\nIt is the 3 digit number \\nprinted on the \\nsignature strip \\nfound at the back \\nof your UCPB \\nVISA Debit Card.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "c40cfbe8-4279-449d-b2a5-da92ad1334eb",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - CardProtection",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - CardProtection",
              "timedOut": true,
              "duration": 60001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {
                "message": "Error: Timeout of 60000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
                "estack": "Error: Timeout of 60000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\n    at listOnTimeout (internal/timers.js:549:17)\n    at processTimers (internal/timers.js:492:7)",
                "diff": null
              },
              "uuid": "afb84f2a-00e6-4159-a274-878e5de23260",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - FeesAndCharges",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - FeesAndCharges",
              "timedOut": false,
              "duration": 8004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: ATM Card Faqs\\n#bot: undefined\\n#me: Fees And Charges\\n#bot: Click here for the complete list of service fees and charges:\\nhttps://www.ucpb.com/rates/servicefeesandcharges/\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "b0647f82-556d-438f-b7b3-f7a78902b8f7",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - InternationalUse",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - InternationalUse",
              "timedOut": false,
              "duration": 5903,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: ATM Card Faqs\\n#bot: undefined\\n#me: Internationa Use\\n#bot: Once activated, your ATM card is now ready to use for local and international transactions. To increase your limit during the duration of your travel abroad, please visit your maintaining branch.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "28db8ab7-7af6-43a6-9941-bd873e6c0618",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - OTP - ATM Cards - FAQs - OTP - custom",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - OTP - ATM Cards - FAQs - OTP - custom",
              "timedOut": false,
              "duration": 10138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: ATM Card Faqs\\n#bot: undefined\\n#me: OTP\\n#bot: As an added layer of protection when you make online purchases, a One-Time Password (OTP) will be required when you use your UCPB VISA\\nDebit and/or UCPB VISA eMoney Card for online purchases at \\nparticipating Verified by VISA merchants.\\n#bot: undefined\\n#me: Unreceived\\n#bot: Your OTP will be sent to your mobile phone, so make sure you update your mobile number with your maintaining branch. \\nTo update your information, visit your maintaining branch and bring two (2) photo-bearing IDs and your UCPB VISA Debit and/or UCPB VISA eMoney Card.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "e9bd6759-2952-4ed5-88d4-46d78ac9c925",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - TransactionLimits",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - FAQs - ATM Cards - FAQs - TransactionLimits",
              "timedOut": false,
              "duration": 22499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: ATM Card Faqs\\n#bot: undefined\\n#me: Transaction Limit\\n#bot: The following are the daily limits of your UCPB VISA Debit Card:\\n•  P20,000 – ATM \\n   Cash Withdrawal\\n•  P50,000 – Online \\n   Purchase\\n•  P50,000 – Point-\\n   of-Sale (POS)\\n   Transaction\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "64923de9-f282-4a9d-a011-e90539a1d987",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - InfoAtmServices - ATM Cards - InfoAtmServices - Email - ATM Cards - InfoAtmServices - Email - Save",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - InfoAtmServices - ATM Cards - InfoAtmServices - Email - ATM Cards - InfoAtmServices - Email - Save",
              "timedOut": false,
              "duration": 7419,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Info on ATM Services\\n#bot: undefined\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "970e9d3e-252c-4731-b65b-1fef161ac245",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - InfoAtmServices - ATM Cards - InfoAtmServices - Phonenumber - ATM Cards - InfoAtmServices - Phonenumber - Save",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - InfoAtmServices - ATM Cards - InfoAtmServices - Phonenumber - ATM Cards - InfoAtmServices - Phonenumber - Save",
              "timedOut": false,
              "duration": 6377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Info on ATM Services\\n#bot: undefined\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "8b126bd1-aac7-44fc-acac-399b0d5ea91b",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - PickUp - ATM Cards - PinMailer - PickUp - NearestBranch",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - PickUp - ATM Cards - PinMailer - PickUp - NearestBranch",
              "timedOut": false,
              "duration": 4069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Pin Mailer\\n#bot: undefined\\n#me: Pick-Up\\n#bot: You can pick-up the PIN Mailer to any UCPB Branch. Kindly please coordinate to your chosen branch as you pick-up the PIN Mailer and accomplish the Authorization for Release form.\\n#bot: undefined\\n#me: Nearest Branch\\n#bot: Yes. Fill out and sign the Authorization to Release Form, and inform your maintaining branch that you wish to pick up the new PIN Mailer at a different branch.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "1dcf0e6e-f9ef-4bd9-af08-ba488d6ecf92",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - PickUp - ATM Cards - PinMailer - PickUp - Representative",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - PickUp - ATM Cards - PinMailer - PickUp - Representative",
              "timedOut": false,
              "duration": 5833,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Pin Mailer\\n#bot: undefined\\n#me: Pick-Up\\n#bot: You can pick-up the PIN Mailer to any UCPB Branch. Kindly please coordinate to your chosen branch as you pick-up the PIN Mailer and accomplish the Authorization for Release form.\\n#bot: undefined\\n#me: Pick-up by Rep\\n#bot: Yes. Fill out the Authorization for Release Form and inform your authorizes representative to bring two (2) photo bearing IDs upon pick-up of your PIN Mailer.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "0abe3933-9460-4cca-bd29-24fd0d8b0087",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - Request",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - PinMailer - ATM Cards - PinMailer - Request",
              "timedOut": false,
              "duration": 3067,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Pin Mailer\\n#bot: undefined\\n#me: Request\\n#bot: Visit any UCPB branch to fill out a PIN Change Request Form. The PIN Mailer will be available within 7-10 banking days.\\nThis transaction is subject to a minimal fee.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "cc25a5b1-98e7-4908-bf77-a437aed05e9a",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - ATMTransactions",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - ATMTransactions",
              "timedOut": false,
              "duration": 3944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Transaction Problems\\n#bot: undefined\\n#me: ATM Transactions\\n#bot: What to do if my account was debited but no cash was dispensed from your ATM?\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "159c5a83-4686-45d1-a132-fbc89c12d48a",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - UCPBVisaDebitCard",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - UCPBVisaDebitCard",
              "timedOut": false,
              "duration": 7546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Transaction Problems\\n#bot: undefined\\n#me: UCPB Visa Debit Card\\n#bot: Aside from ATM transactions, the UCPB Visa Debit Card can be used for the following: \\n•  International ATM \\n   cash withdrawal in \\n   the local currency \\n   when you travel \\n   abroad. \\n•  Cashless Purchases \\n   via Point-of-Sale \\n   (POS) terminals in \\n   VISA-accredited \\n   merchants here \\n   and abroad.\\n•  Online Shopping \\n   through VISA-\\n   accredited web \\n   merchants/\\n   e-commerce sites.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "aaa1ff8a-6110-416c-a75e-e9574a9ff1c8",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - Unauthorized",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - Transactions - ATM Cards - Transactions - Unauthorized",
              "timedOut": false,
              "duration": 6342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: Transaction Problems\\n#bot: undefined\\n#me: Unauthorized\\n#bot: Immediately report any unauthorized use of your card to UCPB ATM Hotline at 811-9292 and have your card blocked to prevent any additional unauthorized use.  You will also be requested to fill out a dispute form and provide other required information and/or documents to help the investigation and to see if funds may still be retrieved from the merchant, following VISA rules and guidelines. Please note that card replacement of blocked cards is subject to a card replacement fee\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "82db81a9-08a4-4d2d-93a0-e463793baebc",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - WithdrawVisaDeb",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - WithdrawVisaDeb",
              "timedOut": false,
              "duration": 2605,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: What to do if my account was debited but no cash was dispensed from your ATM?\\n#bot: Immediately call the UCPB ATM Center Hotline at (02) 811-9292 to report failed transactions. Please provide the following information:\\n•  ATM location\\n•  Date and time of \\n   transaction\\n•  Amount debited\\n•  Account and card \\n   number\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "8f26f0cc-a8fe-4344-a4e6-5cad26736365",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "ATM Cards - ATM Cards - myAccountDebit",
              "fullTitle": "Botium Test-Suite ATM Cards - ATM Cards - myAccountDebit",
              "timedOut": false,
              "duration": 3172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: ATM Cards\\n#bot: UCPB & UCPB Savings Bank ATM network is now 100% EMV-ready.\\n#bot: undefined\\n#me: What to do if my account was debited but no cash was dispensed from your ATM?\\n#bot: Immediately call the UCPB ATM Center Hotline at (02) 811-9292 to report failed transactions. Please provide the following information:\\n•  ATM location\\n•  Date and time of \\n   transaction\\n•  Amount debited\\n•  Account and card \\n   number\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst messageLog = []\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  messageLog.push('#me: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  messageLog.push('#bot: ' + msg.messageText)\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (err) => {\n  addContext(runner, { title: 'Conversation Log', value: messageLog.join('\\n') })\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then(() => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish()\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err)\n  })",
              "err": {},
              "uuid": "fe480c19-9e26-44d0-b826-c85269d28e69",
              "parentUUID": "95ee94fb-b0ba-427f-afa3-eaa35e9c072b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4bbe0a9-876a-4e14-b5a7-e187c991f136",
            "7031161d-fecf-4672-a6c0-c025742d5dc2",
            "0ee2a5a3-f2a6-4d29-9e34-da002425fc82",
            "f9df6b72-9d8a-48d0-b3a4-204ee468bf72",
            "48c2f4f5-7aae-4b2c-8f8e-029e9279340e",
            "ed227c7b-d604-4028-81c2-4d69875a0f15",
            "c40cfbe8-4279-449d-b2a5-da92ad1334eb",
            "b0647f82-556d-438f-b7b3-f7a78902b8f7",
            "28db8ab7-7af6-43a6-9941-bd873e6c0618",
            "e9bd6759-2952-4ed5-88d4-46d78ac9c925",
            "64923de9-f282-4a9d-a011-e90539a1d987",
            "970e9d3e-252c-4731-b65b-1fef161ac245",
            "8b126bd1-aac7-44fc-acac-399b0d5ea91b",
            "1dcf0e6e-f9ef-4bd9-af08-ba488d6ecf92",
            "0abe3933-9460-4cca-bd29-24fd0d8b0087",
            "cc25a5b1-98e7-4908-bf77-a437aed05e9a",
            "159c5a83-4686-45d1-a132-fbc89c12d48a",
            "aaa1ff8a-6110-416c-a75e-e9574a9ff1c8",
            "82db81a9-08a4-4d2d-93a0-e463793baebc",
            "8f26f0cc-a8fe-4344-a4e6-5cad26736365",
            "fe480c19-9e26-44d0-b826-c85269d28e69"
          ],
          "failures": [
            "afb84f2a-00e6-4159-a274-878e5de23260"
          ],
          "pending": [],
          "skipped": [],
          "duration": 233465,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}